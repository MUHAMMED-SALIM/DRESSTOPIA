
<%- include("../layouts/header.ejs") %>

<body style="font-family: Arial, sans-serif; background-color: #ffffff; color: #000000; margin: 0; padding: 0;">
  <div style="max-width: 400px; margin: 50px auto; padding: 20px; border: 1px solid #000000; border-radius: 10px; background-color: #ffffff;">
    <h3 style="margin-bottom: 20px; text-align: center;">Enter OTP Code</h3>
    <form id="otpForm" method="POST" action="/verifyotp">
      <input type="hidden" id="emailInput" name="email" value="<%= email %>">
      <div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
        <input type="text" class="otp-input" name="one" style="width: 60px; height: 40px; font-size: 18px; text-align: center;" maxlength="1" required>
        <input type="text" class="otp-input" name="two" style="width: 60px; height: 40px; font-size: 18px; text-align: center;" maxlength="1" disabled>
        <input type="text" class="otp-input" name="three" style="width: 60px; height: 40px; font-size: 18px; text-align: center;" maxlength="1" disabled>
        <input type="text" class="otp-input" name="four" style="width: 60px; height: 40px; font-size: 18px; text-align: center;" maxlength="1" disabled>
      </div> 
      <button type="submit" class="btn" style="width: 100%; height: 40px; background-color: #000000; color: #ffffff; border: none; border-radius: 5px; cursor: pointer;">VERIFY OTP</button>
    </form>

    <div id="expirationMessage" style="margin-bottom: 10px;"></div>
    <span class="text-secondary">Didn't receive code?</span>
    <button class="genric-btn success-border radius" type="button" id="resendLink" style="width: 100%; height: 40px; background-color: #ffffff; color: #000000; border: 1px solid #000000; border-radius: 5px; cursor: pointer;">RESEND OTP</button>
    <div id="errorMessage" style="color: red; margin-top: 10px;"></div>
    <span id="timerDisplay"></span> seconds remaining
    <div id="successMessage" style="color: green; margin-top: 10px;"></div>

    <% if (typeof message !== 'undefined') { %>
      <h5 style="color: red; text-align: center;"><%= message %></h5>
    <% } %>
  </div>

  <%- include("../layouts/footer.ejs") %>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const otpForm = document.getElementById('otpForm');
      const resendButton = document.getElementById('resendLink');

      // Resend OTP Button Click Event
      resendButton.addEventListener('click', async function(event) {
        event.preventDefault();

        const email = document.getElementById('emailInput').value;

        try {
          const response = await fetch('/resend-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email: email })
          });

          if (response.ok) {
            const successMessageElement = document.getElementById('successMessage');
            successMessageElement.textContent = 'OTP resent successfully';
          } else {
            console.error('Failed to resend OTP');
          }
        } catch (error) {
          console.error('Error occurred while resending OTP:', error);
        }
      });

      // Form Submission Event
      otpForm.addEventListener('submit', async function(event) {
        event.preventDefault();

        const formData = new FormData(otpForm);
        const formObject = {};
        formData.forEach(function(value, key) {
          formObject[key] = value;
        });

        try {
          const response = await fetch('/verifyotp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formObject)
          });

          const data = await response.json();

          if (response.ok) {
            console.log('OTP verification successful');
            window.location.href = '/';
          } else {
            console.error('Failed to verify OTP');
            const errorMessageElement = document.getElementById('errorMessage');
            errorMessageElement.textContent = data.message;

            const otpInputs = document.querySelectorAll('.otp-input');
            otpInputs.forEach(input => {
              input.style.borderColor = 'red';
            });
          }
        } catch (error) {
          console.error('Error occurred during OTP verification:', error);
        }
      });
    });
  </script>
</body>

    

<script>
document.addEventListener('DOMContentLoaded', function() {
    const otpForm = document.getElementById('otpForm');
    const errorMessageElement = document.getElementById('errorMessage');
    
    // Add event listener to the form submission
    otpForm.addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent default form submission behavior
        
        // Collect form data
        const formData = new FormData(otpForm);
        
        // Create an object to hold the form data
        const formObject = {};
        formData.forEach(function(value, key){
            formObject[key] = value;
        });
        
        try {
            // Make a fetch request
            const response = await fetch('/otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formObject) // Convert the form object to JSON string
            });
            
            const data = await response.json(); // Parse response body as JSON
            
            if (response.ok) {
                // Handle successful response, maybe redirect or show a success message
                console.log('OTP verification successful');
                window.location.href = '/login';
            } else {
                // Handle error response
                console.error('Failed to verify OTP');
                if (data.message) {
                    // Display error message within the form
                    errorMessageElement.textContent = data.message;
                }
                
                // Highlight the invalid OTP input fields (if needed)
                const otpInputs = document.querySelectorAll('.otp-input');
                otpInputs.forEach(input => {
                    input.style.borderColor = 'red';
                });
            }
        } catch (error) {
            console.error('Error occurred during OTP verification:', error);
        }
    });
});



document.addEventListener('DOMContentLoaded', function() {
    const resendButton = document.getElementById('resendLink');
    const successMessageElement = document.getElementById('successMessage');
    
    // Add event listener to the resend button
    resendButton.addEventListener('click', async function(event) {
        // Prevent default button behavior
        event.preventDefault();
        
        // Get the email value from the hidden input field
        const email = document.getElementById('emailInput').value;

        // Make a fetch request to resend OTP
        try {
            const response = await fetch('/resend-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: email }) // Include email in the request body
            });

            if (response.ok) {
                // Display success message within the form
                successMessageElement.textContent = 'OTP resent successfully';
            } else {
                // Handle error response
                console.error('Failed to resend OTP');
            }
        } catch (error) {
            console.error('Error occurred while resending OTP:', error);
        }
    });
});

</script>

  <script>
    const inputs = document.querySelectorAll('.otp-input');
    inputs.forEach((input, index) => {
      input.addEventListener('input', function () {
        if (this.value.length === 1) {

          if (index < inputs.length - 1) {
            inputs[index + 1].removeAttribute('disabled');
            inputs[index + 1].focus();
          }
        } else if (this.value.length === 0) {

          if (index > 0) {
            inputs[index - 1].focus();
            inputs[index].removeAttribute('required');
          }
        }

        for (let i = index + 1; i < inputs.length; i++) {
          inputs[i].setAttribute('required', 'true');
        }
      });

      input.addEventListener('keydown', function (event) {
        if (event.key === 'Backspace' && this.value.length === 0 && index > 0) {
          inputs[index - 1].focus();
          inputs[index - 1].value = '';
          inputs[index].removeAttribute('required');
          inputs[index].removeAttribute('disabled');
        } else if (event.key === 'Backspace' && index < inputs.length - 1 && inputs[index + 1].disabled) {
          inputs[index + 1].removeAttribute('disabled');
        } else if (event.key === 'Enter' && this.value.length === 1) {

          let nextIndex = index + 1;
          while (nextIndex < inputs.length && inputs[nextIndex].disabled) {
            nextIndex++;
          }
          if (nextIndex < inputs.length) {
            inputs[nextIndex].focus();
          }
          event.preventDefault();
        } else if (event.key === ' ') {
          event.preventDefault();
        }
      });
    });
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const timerDisplayElement = document.getElementById('timerDisplay');
      
      let countdownTime = 60; // Initial time in seconds
      
      // Function to update the countdown timer display
      function updateTimerDisplay() {
        const minutes = Math.floor(countdownTime / 60);
        const seconds = countdownTime % 60;
        timerDisplayElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds} seconds remaining`;
      }
  
      // Initial call to update the timer display
      updateTimerDisplay();
  
      // Set interval to update the timer display every second
      setInterval(function() {
        countdownTime--; // Decrement the remaining time
        updateTimerDisplay(); // Update the timer display
      }, 1000);
    });
  </script>
  
  

<%- include("../layouts/footer.ejs") %>
